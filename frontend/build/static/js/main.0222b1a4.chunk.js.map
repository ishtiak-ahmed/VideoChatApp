{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","io","connect","App","useState","me","setMe","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","idToCall","setIdToCall","callEnded","setCallEnded","name","setName","myVideo","useRef","userVideo","connectionRef","useEffect","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","on","id","data","from","signal","style","textAlign","color","className","playsInline","muted","ref","autoPlay","width","TextField","label","variant","value","onChange","e","target","marginBottom","text","Button","startIcon","fontSize","onClick","destroy","IconButton","aria-label","peer","Peer","initiator","trickle","emit","userToCall","signalData","callUser","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0222b1a4.chunk.js","sourcesContent":["import { TextField } from \"@material-ui/core\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\r\nimport PhoneIcon from \"@material-ui/icons/Phone\"\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\r\nimport Peer from \"simple-peer\"\r\nimport io from \"socket.io-client\"\r\nimport \"./App.css\"\r\n\r\nconst socket = io.connect('http://localhost:5000');\r\n\r\n\r\nexport default function App() {\r\n    const [ me, setMe ] = useState(\"\")\r\n\tconst [ stream, setStream ] = useState()\r\n\tconst [ receivingCall, setReceivingCall ] = useState(false)\r\n\tconst [ caller, setCaller ] = useState(\"\")\r\n\tconst [ callerSignal, setCallerSignal ] = useState()\r\n\tconst [ callAccepted, setCallAccepted ] = useState(false)\r\n\tconst [ idToCall, setIdToCall ] = useState(\"\")\r\n\tconst [ callEnded, setCallEnded] = useState(false)\r\n\tconst [ name, setName ] = useState(\"\")\r\n\tconst myVideo = useRef()\r\n\tconst userVideo = useRef()\r\n\tconst connectionRef= useRef()\r\n\r\n    useEffect(()=> {\r\n        navigator.mediaDevices.getUserMedia({video: true, audio: true}).then(stream => {\r\n            setStream(stream)\r\n            myVideo.current.srcObject = stream\r\n        })\r\n\r\n        socket.on('me', id => {\r\n            setMe(id)\r\n        })\r\n\r\n        socket.on('callUser', data => {\r\n            setReceivingCall(true);\r\n            setCaller(data.from)\r\n            setName(data.name)\r\n            setCallerSignal(data.signal)\r\n        })\r\n\r\n    },[])\r\n\r\n\r\n    const callUser = id => {\r\n        const peer = new Peer({\r\n            initiator: true,\r\n            trickle: false,\r\n            stream: stream\r\n        })\r\n        peer.on('signal', data => {\r\n            socket.emit('callUser', {\r\n                userToCall: id,\r\n                signalData: data,\r\n                from: me,\r\n                name: name\r\n            })\r\n        })\r\n\r\n        peer.on('stream', stream => {\r\n            userVideo.current.srcObject = stream;\r\n        })\r\n\r\n        socket.on('callAccepted', signal => {\r\n            setCallAccepted(true)\r\n            peer.signal(signal)\r\n        })\r\n\r\n        connectionRef.current = peer\r\n    }\r\n\r\n    const answerCall = () => {\r\n        setCallAccepted(true)\r\n\r\n        const peer = new Peer({\r\n            initiator: false,\r\n            trickle: false,\r\n            stream: stream\r\n        })\r\n\r\n        peer.on('signal', data => {\r\n            socket.emit('ansCall', {signal: data, to: caller})\r\n        })\r\n\r\n        peer.on('stream', stream => {\r\n            userVideo.current.srcObject = stream;\r\n        })\r\n\r\n        peer.signal(callerSignal);\r\n\r\n        connectionRef.current = peer\r\n    }\r\n\r\n    const leaveCall = () => {\r\n        setCallEnded(true)\r\n        \r\n        connectionRef.current.destroy()\r\n    }\r\n\r\n    return (\r\n        <>\r\n\t\t\t<h1 style={{ textAlign: \"center\", color: '#fff' }}>Zoomish</h1>\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"video-container\">\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{stream &&  <video playsInline muted ref={myVideo} autoPlay style={{ width: \"200px\" }} />}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{callAccepted && !callEnded ?\r\n\t\t\t\t\t<video playsInline ref={userVideo} autoPlay style={{ width: \"300px\"}} />:\r\n\t\t\t\t\tnull}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"myId\">\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"Name\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\tstyle={{ marginBottom: \"20px\" }}\r\n\t\t\t\t/>\r\n\t\t\t\t<CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" startIcon={<AssignmentIcon fontSize=\"large\" />}>\r\n\t\t\t\t\t\tCopy ID\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</CopyToClipboard>\r\n\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"ID to call\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={idToCall}\r\n\t\t\t\t\tonChange={(e) => setIdToCall(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"call-button\">\r\n\t\t\t\t\t{callAccepted && !callEnded ? (\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\r\n\t\t\t\t\t\t\tEnd Call\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\r\n\t\t\t\t\t\t\t<PhoneIcon fontSize=\"large\" />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{idToCall}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{receivingCall && !callAccepted ? (\r\n\t\t\t\t\t\t<div className=\"caller\">\r\n\t\t\t\t\t\t<h1 >{name} is calling...</h1>\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n\t\t\t\t\t\t\tAnswer\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</>\r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}